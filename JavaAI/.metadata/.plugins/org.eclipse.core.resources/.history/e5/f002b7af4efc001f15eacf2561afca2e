package ann;

//acts as a view into a parent tensor
//holds no actual data but limits the bounds of a tensor such that
//iteration and tensor operations are limited to a subset of that tensor
public class SubTensor extends Tensor{
	Tensor parent;
	int size;
	
	public SubTensor(Shape s, Tensor parent) {
		super(s);
		this.parent = parent;
	}
	
	@Override
	public void init() {
		rank = shape.rank();
		strides = new int[rank];

		//start with the last stride being 1
		strides[0] = 1;

		// compute strides by successive multiplications
		for (int i = 1; i < rank; i++) {
			strides[i] = strides[i - 1] * shape.getDim(i - 1);
		}
		
		//no data init (no data lol)
		
		size = strides[rank-1] * shape.getDim(rank-1);
	}
	
	private boolean validIndex(int[] ind) {
		if(ind.length != shape.rank()) return false;
		for(int i = 0; i< ind.length; i++) {
			if(ind[i] >= shape.getDim(i)) return false;
		}
		return true;
	}
	
	@Override
	public void randomInit(float skew) {
		return;
	}
	
	@Override
	public float at(int[] ind) {
		if(!validIndex(ind)) {
			System.err.println("Invalid index in subtensor!!");
			for(int i = 0; i< ind.length; i++) System.err.print(ind[i] + ", ");
			System.err.println();
		}
		return parent.at(ind);
	}
	
	@Override
	public void add(int[] ind, float n) {
		if(!validIndex(ind)) {
			System.err.println("Invalid index in subtensor!!");
			for(int i = 0; i< ind.length; i++) System.err.print(ind[i] + ", ");
			System.err.println();
		}
		parent.add(ind, n);
	}
	
	@Override
	public void mul(int[] ind, float n) {
		if(!validIndex(ind)) {
			System.err.println("Invalid index in subtensor!!");
			for(int i = 0; i< ind.length; i++) System.err.print(ind[i] + ", ");
			System.err.println();
		}
		parent.mul(ind, n);
	}
	
	@Override
	public void set(int[] ind, float n) {
		if(!validIndex(ind)) {
			System.err.println("Invalid index in subtensor!!");
			for(int i = 0; i< ind.length; i++) System.err.print(ind[i] + ", ");
			System.err.println();
		}
		parent.set(ind, n);
	}
}
